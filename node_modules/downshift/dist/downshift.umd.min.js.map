{"version":3,"file":"downshift.umd.min.js","sources":["../src/set-a11y-status.js","../src/utils.js","../src/downshift.js","../src/index.js"],"sourcesContent":["// istanbul ignore next\nlet statusDiv =\n  typeof document === 'undefined'\n    ? null\n    : document.getElementById('a11y-status-message')\n\nlet statuses = []\n\nfunction setStatus(status) {\n  const isSameAsLast = statuses[statuses.length - 1] === status\n  if (isSameAsLast) {\n    statuses = [...statuses, status]\n  } else {\n    statuses = [status]\n  }\n  const div = getStatusDiv()\n\n  // Remove previous children\n  while (div.lastChild) {\n    div.removeChild(div.firstChild)\n  }\n\n  statuses.filter(Boolean).forEach((statusItem, index) => {\n    div.appendChild(getStatusChildDiv(statusItem, index))\n  })\n}\n\nfunction getStatusChildDiv(status, index) {\n  const display = index === statuses.length - 1 ? 'block' : 'none'\n\n  const childDiv = document.createElement('div')\n  childDiv.style.display = display\n  childDiv.textContent = status\n\n  return childDiv\n}\n\nfunction getStatusDiv() {\n  if (statusDiv) {\n    return statusDiv\n  }\n  statusDiv = document.createElement('div')\n  statusDiv.setAttribute('id', 'a11y-status-message')\n  statusDiv.setAttribute('role', 'status')\n  statusDiv.setAttribute('aria-live', 'assertive')\n  statusDiv.setAttribute('aria-relevant', 'additions text')\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  })\n  document.body.appendChild(statusDiv)\n  return statusDiv\n}\n\nexport default setStatus\n","let idCounter = 1\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop\n}\nfunction noop() {}\n\nfunction findParent(finder, node, rootNode) {\n  if (node !== null && node !== rootNode.parentNode) {\n    if (finder(node)) {\n      if (node === document.body && node.scrollTop === 0) {\n        // in chrome body.scrollTop always return 0\n        return document.documentElement\n      }\n      return node\n    } else {\n      return findParent(finder, node.parentNode, rootNode)\n    }\n  } else {\n    return null\n  }\n}\n\n/**\n * Get the closest element that scrolls\n * @param {HTMLElement} node - the child element to start searching for scroll parent at\n * @param {HTMLElement} rootNode - the root element of the component\n * @return {HTMLElement} the closest parentNode that scrolls\n */\nconst getClosestScrollParent = findParent.bind(\n  null,\n  node => node.scrollHeight > node.clientHeight,\n)\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node - the element that should scroll into view\n * @param {HTMLElement} rootNode - the root element of the component\n * @param {Boolean} alignToTop - align element to the top of the visible area of the scrollable ancestor\n */\n// eslint-disable-next-line complexity\nfunction scrollIntoView(node, rootNode) {\n  const scrollParent = getClosestScrollParent(node, rootNode)\n  if (scrollParent === null) {\n    return\n  }\n  const scrollParentStyles = getComputedStyle(scrollParent)\n  const scrollParentRect = scrollParent.getBoundingClientRect()\n  const scrollParentBorderTopWidth = parseInt(\n    scrollParentStyles.borderTopWidth,\n    10,\n  )\n  const scrollParentBorderBottomWidth = parseInt(\n    scrollParentStyles.borderBottomWidth,\n    10,\n  )\n  const bordersWidth =\n    scrollParentBorderTopWidth + scrollParentBorderBottomWidth\n  const scrollParentTop = scrollParentRect.top + scrollParentBorderTopWidth\n  const nodeRect = node.getBoundingClientRect()\n\n  if (nodeRect.top < 0 && scrollParentRect.top < 0) {\n    scrollParent.scrollTop += nodeRect.top\n    return\n  }\n\n  if (nodeRect.top < 0) {\n    // the item is above the viewport and the parent is not above the viewport\n    scrollParent.scrollTop += nodeRect.top - scrollParentTop\n    return\n  }\n\n  if (nodeRect.top > 0 && scrollParentRect.top < 0) {\n    if (\n      scrollParentRect.bottom > 0 &&\n      nodeRect.bottom + bordersWidth > scrollParentRect.bottom\n    ) {\n      // the item is below scrollable area\n      scrollParent.scrollTop +=\n        nodeRect.bottom - scrollParentRect.bottom + bordersWidth\n    }\n    // item and parent top are on different sides of view top border (do nothing)\n    return\n  }\n\n  const nodeOffsetTop = nodeRect.top + scrollParent.scrollTop\n  const nodeTop = nodeOffsetTop - scrollParentTop\n  if (nodeTop < scrollParent.scrollTop) {\n    // the item is above the scrollable area\n    scrollParent.scrollTop = nodeTop\n  } else if (\n    nodeTop + nodeRect.height + bordersWidth >\n    scrollParent.scrollTop + scrollParentRect.height\n  ) {\n    // the item is below the scrollable area\n    scrollParent.scrollTop =\n      nodeTop + nodeRect.height - scrollParentRect.height + bordersWidth\n  }\n  // the item is within the scrollable area (do nothing)\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId\n  return wrapper\n  function wrapper(...args) {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      fn(...args)\n    }, time)\n  }\n}\n\n/**\n * This is intended to be used to compose event handlers\n * They are executed in order until one of them calls\n * `event.preventDefault()`. Not sure this is the best\n * way to do this, but it seems legit...\n * @param {Function} fns the event hanlder functions\n * @return {Function} the event handler to add to an element\n */\nfunction composeEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      fn && fn(event, ...args)\n      return event.defaultPrevented\n    })\n}\n\n/**\n * This generates a unique ID for all autocomplete inputs\n * @param {String} prefix the prefix for the id\n * @return {String} the unique ID\n */\nfunction generateId(prefix) {\n  return `${prefix}-${idCounter++}`\n}\n\n/**\n * This is only used in tests... Could be useful in SSR?\n * @param {Number} num The number to set the idCountry to\n */\nfunction setIdCounter(num) {\n  idCounter = num\n}\n\n/**\n * Returns the first argument that is not undefined\n * @param {...*} args the arguments\n * @return {*} the defined value\n */\nfunction firstDefined(...args) {\n  return args.find(a => typeof a !== 'undefined')\n}\n\n// eslint-disable-next-line complexity\nfunction getA11yStatusMessage({\n  isOpen,\n  highlightedItem,\n  selectedItem,\n  resultCount,\n  previousResultCount,\n  itemToString,\n}) {\n  if (!isOpen) {\n    if (selectedItem) {\n      return itemToString(selectedItem)\n    } else {\n      return ''\n    }\n  }\n  const resultCountChanged = resultCount !== previousResultCount\n  if (!resultCount) {\n    return 'No results.'\n  } else if (!highlightedItem || resultCountChanged) {\n    return `${resultCount} ${\n      resultCount === 1 ? 'result is' : 'results are'\n    } available, use up and down arrow keys to navigate.`\n  }\n  return itemToString(highlightedItem)\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg\n  if (!arg && defaultValue) {\n    return defaultValue\n  } else {\n    return arg\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n  /* istanbul ignore if */\n  if (element.nodeName) {\n    // then this is preact\n    return typeof element.nodeName === 'string'\n  } else {\n    // then we assume this is react\n    return typeof element.type === 'string'\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  // props for react, attributes for preact\n  return element.props || /* istanbul ignore next (preact) */ element.attributes\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  throw new Error(`The property \"${propName}\" is required in \"${fnName}\"`)\n}\n\nconst stateKeys = [\n  'highlightedIndex',\n  'inputValue',\n  'isOpen',\n  'selectedItem',\n  'type',\n]\n/**\n * @param {Object} state The state object\n * @return {Object} State that is relevant to downshift\n */\nfunction pickState(state = {}) {\n  const result = {}\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k]\n    }\n  })\n  return result\n}\n\nexport {\n  cbToCb,\n  composeEventHandlers,\n  debounce,\n  scrollIntoView,\n  findParent,\n  generateId,\n  firstDefined,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  noop,\n  requiredProp,\n  setIdCounter,\n  pickState,\n  isPlainObject,\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n","/* eslint camelcase:0 */\n\nimport React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport preval from 'preval.macro'\nimport setA11yStatus from './set-a11y-status'\nimport {\n  cbToCb,\n  composeEventHandlers,\n  debounce,\n  scrollIntoView,\n  generateId,\n  firstDefined,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  noop,\n  requiredProp,\n  pickState,\n  isPlainObject,\n} from './utils'\n\nclass Downshift extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    render: PropTypes.func,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultSelectedItem: PropTypes.any,\n    defaultInputValue: PropTypes.string,\n    defaultIsOpen: PropTypes.bool,\n    getA11yStatusMessage: PropTypes.func,\n    itemToString: PropTypes.func,\n    onChange: PropTypes.func,\n    onSelect: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onInputValueChange: PropTypes.func,\n    onUserAction: PropTypes.func,\n    onClick: PropTypes.func,\n    onOuterClick: PropTypes.func,\n    selectedItemChanged: PropTypes.func,\n    itemCount: PropTypes.number,\n    id: PropTypes.string,\n    environment: PropTypes.shape({\n      addEventListener: PropTypes.func,\n      removeEventListener: PropTypes.func,\n      document: PropTypes.shape({\n        getElementById: PropTypes.func,\n        activeElement: PropTypes.any,\n        body: PropTypes.any,\n      }),\n    }),\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */\n    selectedItem: PropTypes.any,\n    isOpen: PropTypes.bool,\n    inputValue: PropTypes.string,\n    highlightedIndex: PropTypes.number,\n    breakingChanges: PropTypes.shape({\n      resetInputOnSelection: PropTypes.bool,\n    }),\n    /* eslint-enable */\n  }\n\n  static defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultSelectedItem: null,\n    defaultInputValue: '',\n    defaultIsOpen: false,\n    getA11yStatusMessage,\n    id: generateId('downshift'),\n    itemToString: i => {\n      if (i == null) {\n        return ''\n      }\n      if (process.env.NODE_ENV !== 'production' && isPlainObject(i)) {\n        //eslint-disable-next-line no-console\n        console.warn(\n          'downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.',\n          'The object that was passed:',\n          i,\n        )\n      }\n      return String(i)\n    },\n    onStateChange: () => {},\n    onInputValueChange: () => {},\n    onUserAction: () => {},\n    onChange: () => {},\n    onSelect: () => {},\n    onOuterClick: () => {},\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment:\n      typeof window === 'undefined' /* istanbul ignore next (ssr) */\n        ? {}\n        : window,\n    breakingChanges: {},\n  }\n\n  // this is an experimental feature\n  // so we're not going to document this yet\n  // nor are we going to test it.\n  // We will try to avoid breaking it, but\n  // we make no guarantees.\n  // If you need it, we recommend that you lock\n  // down your version of downshift (don't use a\n  // version range) to avoid surprise breakages.\n  static stateChangeTypes = {\n    unknown: '__autocomplete_unknown__',\n    mouseUp: '__autocomplete_mouseup__',\n    itemMouseEnter: '__autocomplete_item_mouseenter__',\n    keyDownArrowUp: '__autocomplete_keydown_arrow_up__',\n    keyDownArrowDown: '__autocomplete_keydown_arrow_down__',\n    keyDownEscape: '__autocomplete_keydown_escape__',\n    keyDownEnter: '__autocomplete_keydown_enter__',\n    blurInput: '__autocomplete_blur_input__',\n    changeInput: '__autocomplete_change_input__',\n    keyDownSpaceButton: '__autocomplete_keydown_space_button__',\n    clickButton: '__autocomplete_click_button__',\n    controlledPropUpdatedSelectedItem:\n      '__autocomplete_controlled_prop_updated_selected_item__',\n  }\n\n  constructor(...args) {\n    super(...args)\n    const state = this.getState({\n      highlightedIndex: this.props.defaultHighlightedIndex,\n      isOpen: this.props.defaultIsOpen,\n      inputValue: this.props.defaultInputValue,\n      selectedItem: this.props.defaultSelectedItem,\n    })\n    if (state.selectedItem) {\n      state.inputValue = this.props.itemToString(state.selectedItem)\n    }\n    this.state = state\n  }\n\n  root_handleClick = composeEventHandlers(\n    this.props.onClick,\n    this.root_handleClick,\n  )\n  input = null\n  items = []\n  // itemCount can be changed asynchronously\n  // from within downshift (so it can't come from a prop)\n  // this is why we store it as an instance and use\n  // getItemCount rather than just use items.length\n  // (to support windowing + async)\n  itemCount = null\n  previousResultCount = 0\n\n  /**\n   * Gets the state based on internal state or props\n   * If a state value is passed via props, then that\n   * is the value given, otherwise it's retrieved from\n   * stateToMerge\n   *\n   * This will perform a shallow merge of the given state object\n   * with the state coming from props\n   * (for the controlled component scenario)\n   * This is used in state updater functions so they're referencing\n   * the right state regardless of where it comes from.\n   *\n   * @param {Object} stateToMerge defaults to this.state\n   * @return {Object} the state\n   */\n  getState(stateToMerge = this.state) {\n    return Object.keys(stateToMerge).reduce((state, key) => {\n      state[key] = this.isControlledProp(key)\n        ? this.props[key]\n        : stateToMerge[key]\n      return state\n    }, {})\n  }\n\n  /**\n   * This determines whether a prop is a \"controlled prop\" meaning it is\n   * state which is controlled by the outside of this component rather\n   * than within this component.\n   * @param {String} key the key to check\n   * @return {Boolean} whether it is a controlled controlled prop\n   */\n  isControlledProp(key) {\n    return this.props[key] !== undefined\n  }\n\n  getItemCount() {\n    // things read better this way. They're in priority order:\n    // 1. `this.itemCount`\n    // 2. `this.props.itemCount`\n    // 3. `this.items.length`\n    /* eslint-disable no-negated-condition */\n    if (this.itemCount != null) {\n      return this.itemCount\n    } else if (this.props.itemCount !== undefined) {\n      return this.props.itemCount\n    } else {\n      return this.items.length\n    }\n    /* eslint-enable no-negated-condition */\n  }\n\n  setItemCount = count => (this.itemCount = count)\n  unsetItemCount = () => (this.itemCount = null)\n\n  getItemNodeFromIndex = index => {\n    return this.props.environment.document.getElementById(this.getItemId(index))\n  }\n\n  setHighlightedIndex = (\n    highlightedIndex = this.props.defaultHighlightedIndex,\n    otherStateToSet = {},\n  ) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      {highlightedIndex, ...otherStateToSet},\n      this.scrollHighlightedItemIntoView,\n    )\n  }\n\n  scrollHighlightedItemIntoView = () => {\n    const node = this.getItemNodeFromIndex(this.getState().highlightedIndex)\n    const rootNode = this._rootNode\n    scrollIntoView(node, rootNode)\n  }\n\n  openAndHighlightDefaultIndex = (otherStateToSet = {}) => {\n    this.setHighlightedIndex(undefined, {isOpen: true, ...otherStateToSet})\n  }\n\n  highlightDefaultIndex = (otherStateToSet = {}) => {\n    this.setHighlightedIndex(undefined, otherStateToSet)\n  }\n\n  moveHighlightedIndex = (amount, otherStateToSet) => {\n    if (this.getState().isOpen) {\n      this.changeHighlightedIndex(amount, otherStateToSet)\n    } else {\n      this.openAndHighlightDefaultIndex(otherStateToSet)\n    }\n  }\n\n  // eslint-disable-next-line complexity\n  changeHighlightedIndex = (moveAmount, otherStateToSet) => {\n    const itemsLastIndex = this.getItemCount() - 1\n    if (itemsLastIndex < 0) {\n      return\n    }\n    const {highlightedIndex} = this.getState()\n    let baseIndex = highlightedIndex\n    if (baseIndex === null) {\n      baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1\n    }\n    let newIndex = baseIndex + moveAmount\n    if (newIndex < 0) {\n      newIndex = itemsLastIndex\n    } else if (newIndex > itemsLastIndex) {\n      newIndex = 0\n    }\n    this.setHighlightedIndex(newIndex, otherStateToSet)\n  }\n\n  clearSelection = cb => {\n    this.internalSetState(\n      {\n        selectedItem: null,\n        inputValue: '',\n        isOpen: false,\n      },\n      () => {\n        const inputNode = this._rootNode.querySelector(`#${this.inputId}`)\n        inputNode && inputNode.focus && inputNode.focus()\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  selectItem = (item, otherStateToSet, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      {\n        isOpen: false,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        selectedItem: item,\n        inputValue:\n          this.isControlledProp('selectedItem') &&\n          this.props.breakingChanges.resetInputOnSelection\n            ? this.props.defaultInputValue\n            : this.props.itemToString(item),\n        ...otherStateToSet,\n      },\n      cbToCb(cb),\n    )\n  }\n\n  selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n    const item = this.items[itemIndex]\n    if (item == null) {\n      return\n    }\n    this.selectItem(item, otherStateToSet, cb)\n  }\n\n  selectHighlightedItem = (otherStateToSet, cb) => {\n    return this.selectItemAtIndex(\n      this.getState().highlightedIndex,\n      otherStateToSet,\n      cb,\n    )\n  }\n\n  // any piece of our state can live in two places:\n  // 1. Uncontrolled: it's internal (this.state)\n  //    We will call this.setState to update that state\n  // 2. Controlled: it's external (this.props)\n  //    We will call this.props.onStateChange to update that state\n  //\n  // In addition, we'll call this.props.onChange if the\n  // selectedItem is changed.\n  internalSetState(stateToSet, cb) {\n    let isItemSelected, onChangeArg\n\n    const onStateChangeArg = {}\n    const isStateToSetFunction = typeof stateToSet === 'function'\n\n    // we want to call `onInputValueChange` before the `setState` call\n    // so someone controlling the `inputValue` state gets notified of\n    // the input change as soon as possible. This avoids issues with\n    // preserving the cursor position.\n    // See https://github.com/paypal/downshift/issues/217 for more info.\n    if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n      this.props.onInputValueChange(stateToSet.inputValue, {\n        ...this.getStateAndHelpers(),\n        ...stateToSet,\n      })\n    }\n    return this.setState(\n      state => {\n        state = this.getState(state)\n        stateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet\n\n        // checks if an item is selected, regardless of if it's different from\n        // what was selected before\n        // used to determine if onSelect and onChange callbacks should be called\n        isItemSelected = stateToSet.hasOwnProperty('selectedItem')\n        // this keeps track of the object we want to call with setState\n        const nextState = {}\n        // this is just used to tell whether the state changed\n        const nextFullState = {}\n        // we need to call on change if the outside world is controlling any of our state\n        // and we're trying to update that state. OR if the selection has changed and we're\n        // trying to update the selection\n        if (isItemSelected && stateToSet.selectedItem !== state.selectedItem) {\n          onChangeArg = stateToSet.selectedItem\n        }\n        stateToSet.type = stateToSet.type || Downshift.stateChangeTypes.unknown\n\n        Object.keys(stateToSet).forEach(key => {\n          // onStateChangeArg should only have the state that is\n          // actually changing\n          if (state[key] !== stateToSet[key]) {\n            onStateChangeArg[key] = stateToSet[key]\n          }\n          // the type is useful for the onStateChangeArg\n          // but we don't actually want to set it in internal state.\n          // this is an undocumented feature for now... Not all internalSetState\n          // calls support it and I'm not certain we want them to yet.\n          // But it enables users controlling the isOpen state to know when\n          // the isOpen state changes due to mouseup events which is quite handy.\n          if (key === 'type') {\n            return\n          }\n          nextFullState[key] = stateToSet[key]\n          // if it's coming from props, then we don't care to set it internally\n          if (!this.isControlledProp(key)) {\n            nextState[key] = stateToSet[key]\n          }\n        })\n\n        // if stateToSet is a function, then we weren't able to call onInputValueChange\n        // earlier, so we'll call it now that we know what the inputValue state will be.\n        if (isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n          this.props.onInputValueChange(stateToSet.inputValue, {\n            ...this.getStateAndHelpers(),\n            ...stateToSet,\n          })\n        }\n\n        return nextState\n      },\n      () => {\n        // call the provided callback if it's a callback\n        cbToCb(cb)()\n\n        // only call the onStateChange and onChange callbacks if\n        // we have relevant information to pass them.\n        const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1\n        if (hasMoreStateThanType) {\n          this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers())\n        }\n\n        if (isItemSelected) {\n          this.props.onSelect(\n            stateToSet.selectedItem,\n            this.getStateAndHelpers(),\n          )\n        }\n\n        if (onChangeArg !== undefined) {\n          this.props.onChange(onChangeArg, this.getStateAndHelpers())\n        }\n        // this is currently undocumented and therefore subject to change\n        // We'll try to not break it, but just be warned.\n        this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers())\n      },\n    )\n  }\n\n  getStateAndHelpers() {\n    const {highlightedIndex, inputValue, selectedItem, isOpen} = this.getState()\n    const {id, itemToString} = this.props\n    const {\n      getRootProps,\n      getButtonProps,\n      getLabelProps,\n      getInputProps,\n      getItemProps,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      reset,\n      setItemCount,\n      unsetItemCount,\n    } = this\n    return {\n      // prop getters\n      getRootProps,\n      getButtonProps,\n      getLabelProps,\n      getInputProps,\n      getItemProps,\n\n      // actions\n      reset,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      setItemCount,\n      unsetItemCount,\n\n      //props\n      itemToString,\n      id,\n\n      // state\n      highlightedIndex,\n      inputValue,\n      isOpen,\n      selectedItem,\n    }\n  }\n\n  //////////////////////////// ROOT\n\n  rootRef = node => (this._rootNode = node)\n\n  getRootProps = (\n    {refKey = 'ref', ...rest} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    // this is used in the render to know whether the user has called getRootProps.\n    // It uses that to know whether to apply the props automatically\n    this.getRootProps.called = true\n    this.getRootProps.refKey = refKey\n    this.getRootProps.suppressRefError = suppressRefError\n    return {\n      [refKey]: this.rootRef,\n      ...rest,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n\n  keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n      const amount = event.shiftKey ? 5 : 1\n      this.moveHighlightedIndex(amount, {\n        type: Downshift.stateChangeTypes.keyDownArrowDown,\n      })\n    },\n\n    ArrowUp(event) {\n      event.preventDefault()\n      const amount = event.shiftKey ? -5 : -1\n      this.moveHighlightedIndex(amount, {\n        type: Downshift.stateChangeTypes.keyDownArrowUp,\n      })\n    },\n\n    Enter(event) {\n      if (this.getState().isOpen) {\n        event.preventDefault()\n        this.selectHighlightedItem({\n          type: Downshift.stateChangeTypes.keyDownEnter,\n        })\n      }\n    },\n\n    Escape(event) {\n      event.preventDefault()\n      this.reset({type: Downshift.stateChangeTypes.keyDownEscape})\n    },\n  }\n\n  //////////////////////////// BUTTON\n\n  buttonKeyDownHandlers = {\n    ...this.keyDownHandlers,\n\n    ' '(event) {\n      event.preventDefault()\n      this.toggleMenu({type: Downshift.stateChangeTypes.keyDownSpaceButton})\n    },\n  }\n\n  getButtonProps = ({onClick, onKeyDown, ...rest} = {}) => {\n    const {isOpen} = this.getState()\n    const eventHandlers = rest.disabled\n      ? {}\n      : {\n          onClick: composeEventHandlers(onClick, this.button_handleClick),\n          onKeyDown: composeEventHandlers(onKeyDown, this.button_handleKeyDown),\n        }\n    return {\n      role: 'button',\n      'aria-label': isOpen ? 'close menu' : 'open menu',\n      'aria-expanded': isOpen,\n      'aria-haspopup': true,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  button_handleKeyDown = event => {\n    if (this.buttonKeyDownHandlers[event.key]) {\n      this.buttonKeyDownHandlers[event.key].call(this, event)\n    }\n  }\n\n  button_handleClick = event => {\n    event.preventDefault()\n    // handle odd case for Safari and Firefox which\n    // don't give the button the focus properly.\n    /* istanbul ignore if (can't reasonably test this) */\n    if (\n      this.props.environment.document.activeElement ===\n      this.props.environment.document.body\n    ) {\n      event.target.focus()\n    }\n    this.toggleMenu({type: Downshift.stateChangeTypes.clickButton})\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n\n  /////////////////////////////// LABEL\n\n  getLabelProps = (props = {}) => {\n    this.getLabelProps.called = true\n    if (\n      this.getInputProps.called &&\n      props.htmlFor &&\n      props.htmlFor !== this.inputId\n    ) {\n      throw new Error(\n        `downshift: You provided the htmlFor of \"${\n          props.htmlFor\n        }\" for your label, but the id of your input is \"${\n          this.inputId\n        }\". You must either remove the id from your input or set the htmlFor of the label equal to the input id.`,\n      )\n    }\n    this.inputId = firstDefined(\n      this.inputId,\n      props.htmlFor,\n      generateId('downshift-input'),\n    )\n    return {\n      ...props,\n      htmlFor: this.inputId,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n\n  /////////////////////////////// INPUT\n\n  getInputProps = ({onKeyDown, onBlur, onChange, onInput, ...rest} = {}) => {\n    this.getInputProps.called = true\n    if (this.getLabelProps.called && rest.id && rest.id !== this.inputId) {\n      throw new Error(\n        `downshift: You provided the id of \"${\n          rest.id\n        }\" for your input, but the htmlFor of your label is \"${\n          this.inputId\n        }\". You must either remove the id from your input or set the htmlFor of the label equal to the input id.`,\n      )\n    }\n    this.inputId = firstDefined(\n      this.inputId,\n      rest.id,\n      generateId('downshift-input'),\n    )\n    // the boolean cast here is necessary due to a weird deal with\n    // babel-plugin-istanbul + preval.macro. No idea...\n    const isPreact = Boolean(\n      preval`module.exports = process.env.BUILD_PREACT === 'true'`,\n    )\n    const onChangeKey = isPreact /* istanbul ignore next (preact) */\n      ? 'onInput'\n      : 'onChange'\n    const {inputValue, isOpen, highlightedIndex} = this.getState()\n    const eventHandlers = rest.disabled\n      ? {}\n      : {\n          // preact compatibility\n          [onChangeKey]: composeEventHandlers(\n            onChange,\n            onInput,\n            this.input_handleChange,\n          ),\n          onKeyDown: composeEventHandlers(onKeyDown, this.input_handleKeyDown),\n          onBlur: composeEventHandlers(onBlur, this.input_handleBlur),\n        }\n    return {\n      role: 'combobox',\n      'aria-autocomplete': 'list',\n      'aria-expanded': isOpen,\n      'aria-activedescendant':\n        typeof highlightedIndex === 'number' && highlightedIndex >= 0\n          ? this.getItemId(highlightedIndex)\n          : null,\n      autoComplete: 'off',\n      value: inputValue,\n      ...eventHandlers,\n      ...rest,\n      id: this.inputId,\n    }\n  }\n\n  input_handleKeyDown = event => {\n    if (event.key && this.keyDownHandlers[event.key]) {\n      this.keyDownHandlers[event.key].call(this, event)\n    }\n  }\n\n  input_handleChange = event => {\n    this.internalSetState({\n      type: Downshift.stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: event.target.value,\n    })\n  }\n\n  input_handleBlur = () => {\n    if (!this.isMouseDown) {\n      this.reset({type: Downshift.stateChangeTypes.blurInput})\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n\n  /////////////////////////////// ITEM\n  getItemId(index) {\n    return `${this.props.id}-item-${index}`\n  }\n\n  getItemProps = (\n    {\n      onMouseEnter,\n      onClick,\n      index,\n      item = requiredProp('getItemProps', 'item'),\n      ...rest\n    } = {},\n  ) => {\n    if (index === undefined) {\n      this.items.push(item)\n      index = this.items.indexOf(item)\n    } else {\n      this.items[index] = item\n    }\n    return {\n      id: this.getItemId(index),\n      onMouseEnter: composeEventHandlers(onMouseEnter, () => {\n        this.setHighlightedIndex(index, {\n          type: Downshift.stateChangeTypes.itemMouseEnter,\n        })\n      }),\n      onClick: composeEventHandlers(onClick, () => {\n        this.selectItemAtIndex(index)\n      }),\n      ...rest,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n\n  clearItems = () => {\n    this.items = []\n  }\n\n  reset = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({selectedItem}) => ({\n        isOpen: false,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        inputValue: this.props.itemToString(selectedItem),\n        ...otherStateToSet,\n      }),\n      cbToCb(cb),\n    )\n  }\n\n  toggleMenu = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({isOpen}) => {\n        return {isOpen: !isOpen, ...otherStateToSet}\n      },\n      () => {\n        const {isOpen} = this.getState()\n        if (isOpen) {\n          this.highlightDefaultIndex()\n        }\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  openMenu = cb => {\n    this.internalSetState({isOpen: true}, cbToCb(cb))\n  }\n\n  closeMenu = cb => {\n    this.internalSetState({isOpen: false}, cbToCb(cb))\n  }\n\n  updateStatus = debounce(() => {\n    if (!this._isMounted) {\n      return\n    }\n    const state = this.getState()\n    const item = this.items[state.highlightedIndex] || {}\n    const resultCount = this.getItemCount()\n    const status = this.props.getA11yStatusMessage({\n      itemToString: this.props.itemToString,\n      previousResultCount: this.previousResultCount,\n      resultCount,\n      highlightedItem: item,\n      ...state,\n    })\n    this.previousResultCount = resultCount\n    setA11yStatus(status)\n  }, 200)\n\n  componentDidMount() {\n    // the _isMounted property is because we have `updateStatus` in a `debounce`\n    // and we don't want to update the status if the component has been umounted\n    this._isMounted = true\n    // this.isMouseDown helps us track whether the mouse is currently held down.\n    // This is useful when the user clicks on an item in the list, but holds the mouse\n    // down long enough for the list to disappear (because the blur event fires on the input)\n    // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n    // trigger hiding the menu.\n    const onMouseDown = () => {\n      this.isMouseDown = true\n    }\n    const onMouseUp = event => {\n      this.isMouseDown = false\n      if (\n        (event.target === this._rootNode ||\n          !this._rootNode.contains(event.target)) &&\n        this.getState().isOpen\n      ) {\n        this.reset({type: Downshift.stateChangeTypes.mouseUp}, () =>\n          this.props.onOuterClick(this.getStateAndHelpers()),\n        )\n      }\n    }\n    this.props.environment.addEventListener('mousedown', onMouseDown)\n    this.props.environment.addEventListener('mouseup', onMouseUp)\n\n    this.cleanup = () => {\n      this._isMounted = false\n      this.props.environment.removeEventListener('mousedown', onMouseDown)\n      this.props.environment.removeEventListener('mouseup', onMouseUp)\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      this.isControlledProp('selectedItem') &&\n      this.props.selectedItemChanged(\n        prevProps.selectedItem,\n        this.props.selectedItem,\n      )\n    ) {\n      this.internalSetState({\n        type: Downshift.stateChangeTypes.controlledPropUpdatedSelectedItem,\n        inputValue: this.props.itemToString(this.props.selectedItem),\n      })\n    }\n    if (\n      this.isControlledProp('highlightedIndex') &&\n      this.props.highlightedIndex !== prevProps.highlightedIndex\n    ) {\n      this.scrollHighlightedItemIntoView()\n    }\n    this.updateStatus()\n  }\n\n  componentWillUnmount() {\n    this.cleanup() // avoids memory leak\n  }\n\n  // eslint-disable-next-line complexity\n  render() {\n    const children = unwrapArray(this.props.render || this.props.children, noop)\n    // because the items are rerendered every time we call the children\n    // we clear this out each render and\n    this.clearItems()\n    // we reset this so we know whether the user calls getRootProps during\n    // this render. If they do then we don't need to do anything,\n    // if they don't then we need to clone the element they return and\n    // apply the props for them.\n    this.getRootProps.called = false\n    this.getRootProps.refKey = undefined\n    this.getRootProps.suppressRefError = undefined\n    // we do something similar for getLabelProps\n    this.getLabelProps.called = false\n    // and something similar for getInputProps\n    this.getInputProps.called = false\n    const element = unwrapArray(children(this.getStateAndHelpers()))\n    if (!element) {\n      return null\n    }\n    if (this.getRootProps.called) {\n      if (!this.getRootProps.suppressRefError) {\n        validateGetRootPropsCalledCorrectly(element, this.getRootProps)\n      }\n      return element\n    } else if (isDOMElement(element)) {\n      // they didn't apply the root props, but we can clone\n      // this and apply the props ourselves\n      return React.cloneElement(\n        element,\n        this.getRootProps(getElementProps(element)),\n      )\n    } else {\n      // they didn't apply the root props, but they need to\n      // otherwise we can't query around the autocomplete\n      throw new Error(\n        'downshift: If you return a non-DOM element, you must use apply the getRootProps function',\n      )\n    }\n  }\n}\n\nexport default Downshift\n\nfunction validateGetRootPropsCalledCorrectly(element, {refKey}) {\n  const refKeySpecified = refKey !== 'ref'\n  const isComposite = !isDOMElement(element)\n  if (isComposite && !refKeySpecified) {\n    throw new Error(\n      'downshift: You returned a non-DOM element. You must specify a refKey in getRootProps',\n    )\n  } else if (!isComposite && refKeySpecified) {\n    throw new Error(\n      `downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${\n        refKey\n      }\"`,\n    )\n  }\n  if (!getElementProps(element).hasOwnProperty(refKey)) {\n    throw new Error(\n      `downshift: You must apply the ref prop \"${\n        refKey\n      }\" from getRootProps onto your root element.`,\n    )\n  }\n}\n","import Downshift from './downshift'\n\n/*\n * Fix importing in typescript after rollup compilation\n * https://github.com/rollup/rollup/issues/1156\n * https://github.com/Microsoft/TypeScript/issues/13017#issuecomment-268657860\n */\nDownshift.default = Downshift\n\nexport default Downshift\n"],"names":["setStatus","status","isSameAsLast","statuses","length","div","statusDiv","document","createElement","setAttribute","assign","style","body","appendChild","getStatusDiv","lastChild","removeChild","firstChild","filter","Boolean","forEach","statusItem","index","display","childDiv","textContent","getStatusChildDiv","cbToCb","cb","noop","findParent","finder","node","rootNode","parentNode","scrollTop","documentElement","composeEventHandlers","fns","event","args","some","fn","defaultPrevented","generateId","prefix","idCounter","firstDefined","find","a","unwrapArray","arg","defaultValue","Array","isArray","isDOMElement","element","nodeName","type","getElementProps","props","attributes","pickState","state","result","hasOwnProperty","k","getElementById","getClosestScrollParent","bind","scrollHeight","clientHeight","stateKeys","Downshift","_this","getState","defaultHighlightedIndex","defaultIsOpen","defaultInputValue","defaultSelectedItem","selectedItem","inputValue","itemToString","Component","stateToMerge","this","Object","keys","reduce","key","_this2","isControlledProp","undefined","itemCount","items","stateToSet","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","getStateAndHelpers","setState","_this3","nextState","nextFullState","stateChangeTypes","unknown","onStateChange","onSelect","onChange","onUserAction","highlightedIndex","isOpen","id","getRootProps","getButtonProps","getLabelProps","getInputProps","getItemProps","openMenu","closeMenu","toggleMenu","selectItem","selectItemAtIndex","selectHighlightedItem","setHighlightedIndex","clearSelection","clearItems","reset","setItemCount","unsetItemCount","_isMounted","onMouseDown","isMouseDown","onMouseUp","target","_this4","_rootNode","contains","mouseUp","onOuterClick","environment","addEventListener","cleanup","removeEventListener","prevProps","selectedItemChanged","internalSetState","controlledPropUpdatedSelectedItem","scrollHighlightedItemIntoView","updateStatus","children","render","called","refKey","suppressRefError","refKeySpecified","isComposite","Error","React","cloneElement","propTypes","PropTypes","func","number","any","string","bool","shape","defaultProps","highlightedItem","resultCount","previousResultCount","i","String","prevItem","item","window","root_handleClick","onClick","input","_this5","count","getItemNodeFromIndex","getItemId","otherStateToSet","scrollParent","scrollParentStyles","getComputedStyle","scrollParentRect","getBoundingClientRect","scrollParentBorderTopWidth","parseInt","borderTopWidth","bordersWidth","borderBottomWidth","scrollParentTop","top","nodeRect","bottom","nodeTop","height","openAndHighlightDefaultIndex","highlightDefaultIndex","moveHighlightedIndex","amount","changeHighlightedIndex","moveAmount","itemsLastIndex","getItemCount","baseIndex","newIndex","inputNode","querySelector","inputId","focus","breakingChanges","resetInputOnSelection","itemIndex","rootRef","rest","keyDownHandlers","preventDefault","shiftKey","keyDownArrowDown","keyDownArrowUp","keyDownEnter","keyDownEscape","buttonKeyDownHandlers","keyDownSpaceButton","onKeyDown","eventHandlers","disabled","button_handleClick","button_handleKeyDown","call","activeElement","clickButton","htmlFor","onBlur","onInput","onChangeKey","input_handleChange","input_handleKeyDown","input_handleBlur","changeInput","value","blurInput","onMouseEnter","fnName","propName","requiredProp","push","indexOf","itemMouseEnter","time","timeoutId","setTimeout","debounce","getA11yStatusMessage","default"],"mappings":"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"}